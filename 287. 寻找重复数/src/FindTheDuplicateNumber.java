/*
 * 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。
 * 假设只有一个重复的整数，找出这个重复的数。

示例 1:

输入: [1,3,4,2,2]
输出: 2
示例 2:

输入: [3,1,3,4,2]
输出: 3
说明：

不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。
 */
public class FindTheDuplicateNumber {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {1,3,4,2,2};
		System.out.println(findDuplicate(nums));
	}

	public static int findDuplicate(int[] nums) {
		// 一次遍历，假设当前数字为i，那么就把nums[i]的数字变为负数，当访问的索引对应数字为负数时，则为重复数字
		for(int i = 0 ; i< nums.length ; i++){
            int index = Math.abs(nums[i]);
            if(nums[index] < 0){
                return Math.abs(nums[i]);
            }else
                nums[index] = -nums[index];
        }
        return 0;
    }
}
